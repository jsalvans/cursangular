{
	"angular.binding.oneway.explicacio": "Este tipo de binding sirve para imprimir datos del componente Angular en la pantalla.",
	"angular.binding.oneway.on": "Donde <code>expression</code> es el valor que se quiere imprimir, ya sea una variable o un calculo, y <code>target</code> es el atributo donde se quiere aplicar la expresión.",
	"angular.binding.onewaybind.explicacio": "Este tipo de binding sirve para enviar datos de la vista hacia el componente Angular. Se suele utilizar para llamar acciones dependiendo de los eventos que ocurran en la vista.",
	"angular.binding.onewaybind.on": "Donde <code>expression</code> es el valor que se quiere enviar, ya sea una variable o un calculo, y <code>target</code> es el atributo donde se quiere aplicar la expresión, normalmente eventos.",
	"angular.binding.twoway.explicacio": "Este tipo de binding sirve para enviar y recibir datos de la vista al componente. Si se cambia el valor en la vista se actualizará la variable correspondiente en el componente y viceversa.",
	"angular.binding.twoway.on": "Donde <code>expression</code> es el valor que se quiere imprimir, normalmente una variable, y <code>target</code> es el atributo donde se quiere aplicar la expresión.",
	"angular.directives.ngclass.array.explicacio": "Se aplicará el tag la clase correspondiente a cada elemento del array.",
	"angular.directives.ngclass.explicacio1": "<i>ngClass</i> es una directiva que permite aplicar una o varias clases en un tag, las cuales pueden provenir o no de una variable y pueden tener o no una condición para aplicarlas.",
	"angular.directives.ngclass.explicacio2": "Dependiendo del contenido del atributo reaccionará de un modo u otro.",
	"angular.directives.ngclass.object.explicacio1": "Se aplicará el tag la clase correspondiente a cada elemento del objeto siempre y cuando se cumpla la condición que lo precede.",
	"angular.directives.ngclass.object.explicacio2": "El elemento del objeto pueden ser múltiples clases separadas por espacio.",
	"angular.directives.ngclass.string.explicacio": "Se aplicará el tag la clase correspondiente a cada texto separado entre espacios.",
	"angular.directives.ngfor.exemple.cognoms": "Apellidos",
	"angular.directives.ngfor.exemple.edat": "Edad",
	"angular.directives.ngfor.exemple.element": "Elemento",
	"angular.directives.ngfor.exemple.esimpar": "¿Es elemento impar?",
	"angular.directives.ngfor.exemple.espar": "¿Es elemento par?",
	"angular.directives.ngfor.exemple.esprimer": "¿Es el primero?",
	"angular.directives.ngfor.exemple.esultim": "¿Es el último?",
	"angular.directives.ngfor.exemple.index": "Índice",
	"angular.directives.ngfor.exemple.nom": "Nombre",
	"angular.directives.ngfor.explicacio": "<i>ngFor</i> es una directiva que permite repetir código HTML para cada elemento existente en una lista de elementos.",
	"angular.directives.ngfor.on": "Donde <code>array</code> es la lista de elementos a iterar y <code>elemento</code> es la variable asignada al elemento actual de la iteración.",
	"angular.directives.ngfor.vars.even": "Booleano que devolverá <code>true</code> si el elemento actual de la iteración es impar (primero, tercero, etc).",
	"angular.directives.ngfor.vars.explicacio1": "<i>ngFor</i> contiene variables auxiliares que nos proporcionan información del elemento actual el de la iteración. Son los siguientes:",
	"angular.directives.ngfor.vars.explicacio2": "Para poder utilizar estas variables se les debe asignar un alias, los cuales se pueden declarar de las siguientes formas:",
	"angular.directives.ngfor.vars.first": "Booleano que devolverá <code>true</code> si el elemento actual es el primero de la iteración.",
	"angular.directives.ngfor.vars.index": "Índice de la iteración empezando por 0.",
	"angular.directives.ngfor.vars.last": "Booleano que devolverá <code>true</code> si el elemento actual es el último de la iteración.",
	"angular.directives.ngfor.vars.odd": "Booleano que devolverá <code>true</code> si el elemento actual de la iteración es par (segundo, cuarto, etc).",
	"angular.directives.ngfor.vars.on": "Donde <code>variable</code> es la variable auxiliar que se quiere utilizar y <code>alias</code> es el nombre que se le asignará a la variable para poderla utilizar.",
	"angular.directives.ngfor.vars.title": "Variables auxiliares",
	"angular.directives.ngif.else.explicacio": "<i>ngIf</i> también puede mostrar otro HTML en caso de que la condición se cumpla.",
	"angular.directives.ngif.else.on": "Donde <code>condition</code> es la condición para que es muestre o no el HTML, <code>content</code> es el contenido que se mostrará en caso de que la condición se cumpla, <code>templateId</code> es la ID del <code>ng-template</code> que se mostrará en caso de que la condición no se cumpla y <code>elsecontent</code> es el contenido de este <code>ng- template</code>",
	"angular.directives.ngif.explicacio": "<i>ngIf</i> es una directiva que permite mostrar o no código HTML dependiendo de la condición que se le meta.",
	"angular.directives.ngif.nomes.ngtemplate": "Solo válido en el tag ng-template",
	"angular.directives.ngif.on": "Donde <code>condition</code> es la condición para que es muestre o no el HTML y <code>contento</code> es el contenido que se mostrará en caso de que la condición se cumpla.",
	"angular.directives.ngif.then.explicacio1": "Finalmente, el <i>ngIf</i> también se le puede indicar que dibuje un bloque indicado en vez del contenido del tag donde es el <i>ngIf</i>.",
	"angular.directives.ngif.then.explicacio2": "Con <i>then</i> el contenido del tag donde esté el <i>ngIf</i> no es mostrará nunca.",
	"angular.directives.ngif.then.on": "Donde <code>condition</code> es la condición para que es muestre o no el HTML, <code>templateId</code> es la ID del <code>ng-template</code> que se mostrará en caso de que la condición se cumpla, <code>thencontent</code> es el contenido de este <code>ng-template</code>, <code>elseTemplateId</code> es la ID del <code>ng-template</code> que se mostrará en caso de que la condición no se cumpla y <code>elsecontent</code> es el contenido de este último <code>ng-template</code>.",
	"angular.directives.ngmodel.explicacio1": "<i>NgModel</i> es una directiva que permite pasar un parámetro del componente a la vista y viceversa.",
	"angular.directives.ngmodel.explicacio2": "Es única directiva que se puede utilizar para el <i>Two Way Fecha Binding</i>.",
	"angular.directives.ngmodel.redirect": "Para ver ejemplos, vea la sección",
	"angular.directives.ngstyle.explicacio": "<i>ngStyle</i> es una directiva que permite aplicar estilos a un tag.",
	"angular.directives.ngstyle.on1": "Donde <code>styleName</code> es el nombre de la propiedad CSS, <code>styleValue</code> es el valor que se le quiere asignar a la propiedad, <code>styleUnit</code> es la unidad de medida con la que se aplicará la propiedad en caso necesario, <code>object</code> es un objeto (clave/valor) donde la cada clave sería una propiedad CSS a aplicar y el valor sería el valor de la propiedad; y <code>variable</code> es una variable de tipo string que contendría el valor de la propiedad CSS.",
	"angular.directives.ngstyle.on2": "La unidad de medida también se puede especificar en cada valor de las propiedades CSS.",
	"angular.directives.ngswitch.explicacio": "<i>ngSwitch</i> es una directiva que permite mostrar un código HTML u otro dependiendo del valor de una variable.",
	"angular.directives.ngswitch.on1": "Donde <code>variable</code> es la variable comprobar, <code>value</code> el posible valor que se comprobará y <code>contento</code> el contenido que se mostrará si el valor coincide con el de la variable.",
	"angular.directives.ngswitch.on2": "En caso de que no coincida con ninguna se mostrará el contenido del tag que contenga el atributo <code>* ngSwitchDefault</code> si se ha informado.",
	"angular.directives.ngtemplateoutlet.explicacio": "<i>NgTemplateOutlet</i> es una directiva para que permite pintar el contenido de un <i>NgTemplate</i> en un <i>NgContainer</i> y aplicarle, si se quiere, variables mediante un contexto.",
	"angular.directives.ngtemplateoutlet.on": "<span>Donde:</span> <ul> <li><code>idTemplate</code>: es el identificador del <i>NgTemplate</i>.</li> <li><code>content</code>: es el contenido que se quiere mostrar.</li> <li><code>default</code>: es el alias a asignar a la variable por defecto del contexto (introducida en <code>$implicit</code>).</li> <li><code>defaultValue</code>: es el valor de la variable por defecto (introducida en <code>$implicit</code>).</li> <li><code>variable</code>: es una variable que puedes asignar a parte de la que hay por defecto (pudiendo asignar tantas como se quiera).</li> <li><code>variableValue</code>: es el valor de la variable.</li> <li><code>alias</code>: es el alias a asignar a una de las variables.</li> <li><code>contextObj</code>: es una variable del componente que representa el contexto.</li></ul>",
	"angular.directives.ngvalue.explicacio1": "<i>NgValue</i> es una directiva que permite pasar un parámetro del componente a la vista de la misma manera que se podría hacer con <code>[value]</code>.",
	"angular.directives.ngvalue.explicacio2": "La diferencia que hay entre <code>[value]</code> y <code>[ngValue]</code> es que el primero siempre será texto y el segundo pueden ser objetos.",
	"angular.directives.structures.container.explicacio1": "Con esta estructura podemos utilizar múltiples directivas con asteriscos, uno en el mismo <i>ngContainer</i> y el otro en el hijo.",
	"angular.directives.structures.container.explicacio2": "El <i>NgContainer</i> nunca se mostrará en el HTML final, sino que sólo se mostrará su contenido.",
	"angular.directives.structures.container.explicacio3": "(Con la consola de desarrollador del navegador puede comprobar que no aparece el tag <code>ng-container</code>)",
	"angular.directives.structures.explicacio1": "Como hemos podido ver, en las directivas <i>ngIf</i>, <i>ngFor</i> y <i>ngSwitch</i> se utiliza un asterisco (<code>*</code>) como prefijo de estas (o de atributos auxiliares en el caso del <i>ngSwitch</i>).",
	"angular.directives.structures.explicacio2": "Este asterisco indica que la directiva modifica la estructura HTML y Angular internamente traducirá el código en otro que use el ng-template.",
	"angular.directives.structures.explicacio3": "Por ejemplo tenemos el siguiente código de la izquierda que Angular lo traducirá al de la derecha:",
	"angular.directives.structures.explicacio4": "En un tag sólo puede haber una directiva con asterisco a la vez. Si hiciéramos el siguiente ejemplo no funcionaría:",
	"angular.directives.structures.explicacio5": "Para hacerlo funcionar deberíamos mover el <i>ngIf</i> a un tag padre o utilizar una estructura auxiliar.",
	"angular.directives.structures.menu": "Directives: Estructuras Auxiliares",
	"angular.directives.structures.template.explicacio1": "Con esta estructura podemos declarar una estructura HTML. Esta estructura por sí sola no aparecerá, sino que sólo lo hará si se le aplica un <i>ngIf</i>, <i>ngFor</i>, <i>ngSwitchCase</i> o <i>ngSwitchDefault</i>; o si la llamamos mediante el <i>else</i> o <i>then</i> del <i>ngIf</i>.",
	"angular.directives.structures.template.explicacio2": "En el caso del <i>NgContainer</i>, donde normalmente haríamos servir asterisco, usaremos corchetes (<code>[]</code>) o el atributo tal cual en caso de que no se le necesite pasar ningún parámetro , por lo que podremos poner directivas juntas cuando normalmente no podríamos (una con asterisco y el otro con corchetes).",
	"angular.directives.structures.template.explicacio3": "Del mismo modo que el <i>NgContainer</i>, el <i>NgTemplate</i> nunca se mostrará en el HTML final, sino que sólo se mostrará su contenido.",
	"angular.directives.structures.template.explicacio4": "(Con la consola de desarrollador del navegador puede comprobar que no aparece el tag <code>ng-template</code>)",
	"angular.directives.structures.title": "Estructuras Auxiliares",
	"angular.http.arrayBuffer": "array de bytes. Útil por ejemplo para guardar el contenido en un archivo.",
	"angular.http.blob": "objeto binario. Útil por ejemplo para guardar el contenido en un archivo.",
	"angular.http.delete": "Realiza una petición delete. Se le pasa una URL y las opciones de la petición.",
	"angular.http.exemple1": "Un ejemplo de petición sería el siguiente:",
	"angular.http.exemple2": "Un ejemplo de petición con <code>responseType</code> sería el siguiente:",
	"angular.http.exemple3": "Un ejemplo de petición con respuesta tipada sería el siguiente:",
	"angular.http.exemple4": "Un ejemplo de petición con acceso todos los parámetros de la respuesta sería el siguiente:",
	"angular.http.explicacio1": "Angular incorpora un cliente HTTP con el que podemos hacer llamadas a API para poder recibir y enviar información.",
	"angular.http.explicacio10": "Este parámetro acepta las siguientes opciones:",
	"angular.http.explicacio11": "En cambio, si quisiéramos convertir la respuesta en alguna clase propia deberíamos poner el nombre de la clase antes de los parámetros, entre corchetes angulares <code>&lt;&gt;</code>.",
	"angular.http.explicacio12": "Además, por defecto el cliente HTTP devuelve directamente el cuerpo de la respuesta. Si queremos ver otros parámetros de la respuesta tendremos que indicar a las opciones.",
	"angular.http.explicacio2": "Para utilizar <i>HttpClient</i> se debe realizar la siguiente importación al app.module.ts:",
	"angular.http.explicacio3": "Y incorporarlo la lista de impuestos del mismo archivo:",
	"angular.http.explicacio4": "Entonces se debe importar el cliente a la clase donde lo queremos utilizar:",
	"angular.http.explicacio5": "Y finalmente declararlo al constructor:",
	"angular.http.explicacio6": "Recomiendo utilizar <i>HttpClient</i> en un servicio y no directamente en un componente.",
	"angular.http.explicacio7": "El <i>HttpClient</i> contiene múltiples funciones, pero las que más nos interesan son las siguientes:",
	"angular.http.explicacio8": "Una vez declarada la función a usar del <i>HttpClient</i> deberemos llamar a la función <code>suscribe</code> para realizar la llamada http. Esta función devolverá una función de flecha con la respuesta de la petición.",
	"angular.http.explicacio9": "Por defecto el cliente HTTP devuelve el cuerpo de la respuesta en JSON, pero podemos manipular el tipo de la respuesta con el parámetro <code>responseType</code> en las opciones.",
	"angular.http.get": "Realiza una petición get. Se le pasa una URL y las opciones de la petición.",
	"angular.http.interceptors.explicacio1": "El <i>HttpClient</i> permite añadir interceptores, los cuales permiten manipular las llamadas HTTP antes ser enviadas.",
	"angular.http.interceptors.explicacio2": "Puede ser útil para añadir un token a todas las llamadas de una API por ejemplo.",
	"angular.http.interceptors.explicacio3": "Para crear un interceptor se debe crear una clase que implemente <code>HttpInterceptor</code> y declararlo a <code>app.module.ts</code>, tal y como se puede ver en el siguiente ejemplo:",
	"angular.http.interceptors.explicacio4": "Este ejemplo llama a un servidor que devuelve un JSON con un campo <code>msg</code> que tendrá como valor el mismo que se envíe en la cabecera \"sample\" de la petición:",
	"angular.http.json": "es la opción por defecto con el que podremos consultar los datos con cualquier objeto de Javascript.",
	"angular.http.patch": "Realiza una petición patch. Se le pasa una URL, un cuerpo y las opciones de la petición.",
	"angular.http.post": "Realitza una peticio post. Se li passa una URL, un cos y les opcions de la petició.",
	"angular.http.put": "Realiza una petición put. Se le pasa una URL, un cuerpo y las opciones de la petición.",
	"angular.http.text": "una cadena de texto al que podremos asignar a una variable string.",
	"angular.routing.can.activate.exemple": "Esta clase validará si se le ha insertado un usuario (desde algún componente que importe el servicio) y, si no es así, redirigirá a <i>login</i>.",
	"angular.routing.can.activate.explicacio": "El Can Activate es una clase la que debe implementar un servicio. Este debe tener una función canActivate() la cual deberá realizar las validaciones necesarias para discernir si el usuario tiene acceso o no a la ruta y devolver true o false dependiendo de la validación. También se pueden realizar acciones dependiendo del resultado, como hacer una redirección si el usuario no tiene acceso a la ruta que ha solicitado.",
	"angular.routing.can.activate.title": "Can Activate",
	"angular.routing.config.explicacio1": "En primer lugar vamos a crear el archivo <code>src/app/app-routing.module.ts</code> el cual debe tener el siguiente aspecto:",
	"angular.routing.config.explicacio2": "A continuación lo incorporamos al <code>src/app/app.module.ts</code>:",
	"angular.routing.config.explicacio3": "A partir de aquí ya podemos configurar las rutas para nuestro proyecto.",
	"angular.routing.config.explicacio4": "Una alternativa es configurarlo todo directamente al archivo <code>src/app/app-routing.module.ts</code>",
	"angular.routing.config.subtitle": "Alternativa corta",
	"angular.routing.config.title": "Configurar el proyecto para aceptar rutas",
	"angular.routing.exemple.explicacio1": "Crearemos una aplicación que mostrará una lista de notas y podremos acceder a cada una de ellas para ver su nombre. Esta pantalla tendrá una pantalla de login será la única a la que tendremos acceso si no nos me identificado.",
	"angular.routing.exemple.explicacio10": "Definiremos el componente de notas al que simplemente le añadiremos un listado de notas con una id y un nombre cada una.",
	"angular.routing.exemple.explicacio11": "Finalmente definiremos el componente <i>note</i> al que simplemente recuperaremos el <i>id</i> de la ruta y la imprimiremos.",
	"angular.routing.exemple.explicacio2": "Definimos las rutas al <code>app.module.ts</code> con sus componentes.",
	"angular.routing.exemple.explicacio3": "Todas las pantallas menos login tendrán un <code>canActivate</code> que nos impedirá el acceso de los que no se identifiquen.",
	"angular.routing.exemple.explicacio4": "Pondremos también un redirect para las rutas no tratadas, que redirigirá a 'notas'.",
	"angular.routing.exemple.explicacio5": "Crearemos el servicio <code>AuthGuardService</code> que implementará <code>CanActivate</code>.",
	"angular.routing.exemple.explicacio6": "La función <code>canActivate ()</code> será la que definirá cuando se tiene acceso, redirigiendo al login de lo contrario.",
	"angular.routing.exemple.explicacio7": "Definiremos el componente principal. Aquí crearemos 3 enlaces: el primero irá al <i>welcome</i>, el segundo a <i>notes</i> y el tercero lanzará una función que nos cerrará la sesión y nos redirigirá a login. Con el router también controlaremos la ruta actual para mostrar o no los enlaces.",
	"angular.routing.exemple.explicacio8": "Definiremos el componente de login con la función que nos autenticará y, en caso de que la autenticación sea correcto, guardará el usuario al servicio <code>AuthGuardService</code> y nos redirigirá a 'notas'.",
	"angular.routing.exemple.explicacio9": "Definiremos el componente de bienvenida que recuperará el usuario de <code>AuthGuardService</code> y nos saludará.",
	"angular.routing.exemple.menu": "Routing: Ejemplo de aplicación con routing",
	"angular.routing.exemple.title": "Ejemplo de aplicación con routing",
	"angular.routing.explicacio1": "El <i>routing</i> es la forma de decirle a Angular qué componentes se harán servir dependiendo de las rutas por donde vaya navegando el usuario.",
	"angular.routing.explicacio2": "Cuando se crea un proyecto nuevo con Angular Cli este te pregunta si lo quieres implementar, creando hacerte el archivo <code>src/app/app-routing.module.ts</code>, para poder configurar las diferentes rutas, y configurando -te el <code>src/app/app.module.ts</code>.",
	"angular.routing.explicacio3": "En caso de no haber generado el fichero con Angular Cli podemos configurar el proyecto manualmente.",
	"angular.routing.get.params.explicacio": "Cuando se acceden a rutas a las que se les pasa uno o varios parámetros para la ruta, estos se pueden recuperar en el componente de la siguiente forma:",
	"angular.routing.get.params.menu": "Routing: Recuperar parámetros de la ruta",
	"angular.routing.get.params.title": "Recuperar parámetros de la ruta",
	"angular.routing.location.strategy.explicacio": "Angular tiene dos estrategias a la hora de tratar las URL cuando se navega por la aplicación: PathLocationStrategy y HashLocationStrategy",
	"angular.routing.location.strategy.hash1": "Con esta configuración la ruta funciona a partir de un hash (<code>#</code>). Un ejemplo sería el siguiente:",
	"angular.routing.location.strategy.hash2": "Donde <code>my-app</code> sería la ruta principal de la aplicación y <code>welcome</code> un componente dentro de la aplicación.",
	"angular.routing.location.strategy.hash3": "Esta configuración es la más sencilla de utilizar ya que no requiere de configuraciones del servidor.",
	"angular.routing.location.strategy.hash4": "El HashLocationStrategy no está configurado por defecto en Angular, por lo que se debe configurar modificando el RouterModule de la siguiente forma:",
	"angular.routing.location.strategy.menu": "Routing: Estrategia de localización",
	"angular.routing.location.strategy.path1": "Con esta configuración la ruta funciona de forma estándar. Un ejemplo sería el siguiente:",
	"angular.routing.location.strategy.path2": "Donde <code>my-app</code> sería la ruta principal de la aplicación y <code>welcome</code> un componente dentro de la aplicación.",
	"angular.routing.location.strategy.path3": "Esta configuración provoca que las rutas que no sean la raíz den un error 404 si se intenta acceder directamente en vez de navegar por la aplicación. Para que el resto de rutas funcionen debería configurar el servidor para que redirija al index.html.",
	"angular.routing.location.strategy.path4": "El PathLocationStrategy es la configuración por defecto en Angular, pero se puede configurar manualmente modificando el RouterModule de la siguiente forma:",
	"angular.routing.location.strategy.title": "Estrategia de localización",
	"angular.routing.navigation.explicacio": "Una vez configurada nuestra aplicación para poder navegar entre diferentes componentes podemos programarla para poder navegar.",
	"angular.routing.navigation.menu": "Routing: Navegación",
	"angular.routing.navigation.router": "El <i>router</i> es una clase que se puede importar a cualquier componente o servicio para poder redirigir de página en las funciones de typescript. También se puede usar para consultar la ruta actual.",
	"angular.routing.navigation.router.exemple1": "Ejemplo de redirección simple:",
	"angular.routing.navigation.router.exemple2": "Ejemplo de redirección pasando un parámetro:",
	"angular.routing.navigation.router.exemple3": "Ejemplo de consulta de la ruta actual:",
	"angular.routing.navigation.router.link": "El <i>router link</i> es un atributo para el tag <code>a</code> que sirve para indicar a qué componente redirigirá el enlace. Se puede poner directamente si solo se le quiere poner el path o entre corchetes (<code>[]</code>) si se le quiere pasar una variable y/o parámetros de ruta.",
	"angular.routing.navigation.router.link.active.exemple1": "Si el usuario  está en <code>/link</code> se le aplicará la clase <i>activated</i> al tag <code>a</code>.",
	"angular.routing.navigation.router.link.active.exemple2": "Si el usuario está en <code>/link/1</code> se le aplicará la clase <i>activated</i> al tag <code a</code>.",
	"angular.routing.navigation.router.link.active.exemple3": "Si el usuario  está en <code>/link</code> se le aplicará la clase <i>activated</i> al tag <code>div</code>.",
	"angular.routing.navigation.router.link.active.exemple4": "Si el usuario está exactamente en<code>/link/1</code> se le aplicará la clase <i>activated</i> al tag <code>a</code>.",
	"angular.routing.navigation.router.link.active1": "El <i>router link active</i> es un atributo para el tag <code>a</code> o su tag padre que sirve para aplicar la clase indicada en caso de que el usuario esté en la misma ruta que la que indique el <i>router link</i>.",
	"angular.routing.navigation.router.link.active2": "Puede ir acompañado de <code>[routerLinkActiveOptions]=\"{exact: true}\"</code> si se quiere que se aplique sólo cuando la ruta sea exacto.",
	"angular.routing.navigation.router.link.exemple1": "El enlace redirigirá al path <i>link</i> que se haya configurado el RouterModule.",
	"angular.routing.navigation.router.link.exemple2": "El enlace redirigirá al path que se haya configurado el RouterModule que corresponda al valor de la variable del componente <i>link</i>.",
	"angular.routing.navigation.router.link.exemple3": "El enlace redirigirá al path <i>link</i>, con un parámetro con el valor que contenga la variable <i>id</i>, que se haya configurado el RouterModule.",
	"angular.routing.navigation.router.link.exemple4": "El enlace redirigirá al path que se haya configurado el RouterModule que corresponda al valor de la variable del componente <i>link</i> con un parámetro con el valor que contenga la variable <i>id</i>.",
	"angular.routing.navigation.router.outlet1": "El <i>router outlet</i> es el tag que se utiliza para indicarle a Angular donde debe poner el componente que corresponda según la url. Por defecto, si me configurado el proyecto con rutas mediante la Angular CLI, Angular lo pone a <code>src/app/app.component.html</code>. Tiene el siguiente aspecto:",
	"angular.routing.navigation.router.outlet2": "Este tag se puede poner donde se quiera, pero solo se puede poner uno, si se pone más Angular solo cogerá el primero que encuentre cuando renderice la aplicación.",
	"angular.routing.navigation.title": "Navegación",
	"angular.routing.rutes.exemple1": "La primera configuración, cuando la ruta sea <code>/login</code>, activará el componente <i>LoginComponent</i> y el <i>Router Outlet</i> lo pintará.",
	"angular.routing.rutes.exemple2": "La segunda configuración, cuando la ruta sea <code>/welcome</code>, activará el componente <i>WelcomeComponent</i> y el <i>Router Outlet</i> el pintará si el AuthGuardService valida el acceso correctamente .",
	"angular.routing.rutes.exemple3": "La tercera configuración, cuando la ruta sea <code>/notes</code>, activará el componente <i>NotesComponent</i> y el <i>Router Outlet</i> el pintará si el AuthGuardService valida el acceso correctamente.</li>",
	"angular.routing.rutes.exemple4": "La cuarta configuración, cuando la ruta sea <code>/note/</code> seguida de un identificador (por ejemplo <code>/note/3</code>), activará el componente <i>NoteComponent</i> y el <i>Router Outlet</i> lo pintará si el AuthGuardService valida el acceso correctamente.",
	"angular.routing.rutes.exemple5": "La última configuración hace que el resto de rutas que no concuerden con las anteriores configuraciones redirijan a <i>notes</i> y su configuración.",
	"angular.routing.rutes.explicacio1": "Las rutas se configuran en el archivo <code>src/app/app-routing.module.ts</code>, dentro de la variable routes.",
	"angular.routing.rutes.explicacio2": "Cada ruta estará definida dentro de claves (<code>{ }</code>) y puede tener los siguientes parámetros:",
	"angular.routing.rutes.taula.canActivate": "Clase que implementa CanActivate, lo podremos programar para que valide lo que nos sea necesario en la aplicación con el fin de discernir si el usuario puede acceder a la ruta o no.",
	"angular.routing.rutes.taula.component": "Es el componente que se ejecutará al acceder a la ruta definida, junto con su HTML.",
	"angular.routing.rutes.taula.path": "Es la ruta a la que podrás navegar. Se le pueden pasar parámetros o expresiones regulares.",
	"angular.routing.rutes.taula.redirectTo": "En vez de definir un componente podemos redirigir a otra ruta.",
	"angular.routing.rutes.title": "Configuración de las rutas",
	"cercar": "Buscar",
	"component": "Componente",
	"exemple": "Ejemplo",
	"exemple.descarregar": "Descargar ejemplo",
	"exemples": "Ejemplos",
	"explicacio": "Explicación",
	"mateix.component": "mismo componente",
	"netejar.filtre": "Limpiar filtro",
	"no": "No",
	"objecte": "Objecto",
	"or": "O",
	"parametre": "Parámetro",
	"que.es": "¿Que es?",
	"representacio.single.title": "Se representa de la siguiente manera:",
	"representacio.title": "Se puede representar de varias formas:",
	"resultat": "Resultado",
	"resultat.escriviu": "escriba dentro de los campos",
	"saludar": "saludar",
	"salutacio": "hola",
	"si": "Sí",
	"tipus": "Tipo",
	"title": "Curso Angular",
	"tots": "Todos",
	"variable": "Variable",
	"vista": "Vista"
}
